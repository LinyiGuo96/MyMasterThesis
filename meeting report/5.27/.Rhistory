library(forecast)
set.seed(1)
model <- Arima(ts(rnorm(24000),freq=12), order=c(0,1,1), seasonal=c(0,1,1),fixed=c(theta=0.313, Theta=0.817))
foo <- simulate(model,nsim = 240)
plot(foo,type="l")
fit <- Arima(foo, order=c(0,1,1), seasonal=c(0,1,1))
foo
summary(fit)
set.seed(1)
S <- matrix(0,100,251) # Cause Seasonal component's state space model, we have additional 11 zero-values.
Tr <- matrix(0,100,251)
S[,12] <- S_1
library(forecast)
set.seed(1)
model <- Arima(ts(rnorm(24000),freq=12), order=c(0,1,1), seasonal=c(0,1,1),fixed=c(theta=0.5, Theta=0.5))
data <- simulate(model,nsim=240)
# let's try SIS(Sequential Importance Sampling) at first
# Initialization
Tr_0 <- rep(rnorm(1),100)
Se_0 <- rep(rnorm(1),100)
w_0 <- rep(1/100,100)
# Generate particles
Tr_1 <- Tr_0 + rnorm(100)
Se_1 <- -Se_0 + rnorm(100)
# Compute weights
w_1 <- w_0 * dnorm(rep(data[1],100) - Tr_1 - Se_1)
w_1 <- w_1 / sum(w_1) # normalize
# compute state value
T_1 <- sum(w_1 * Tr_1)
S_1 <- sum(w_1 * Se_1)
set.seed(1)
S <- matrix(0,100,251) # Cause Seasonal component's state space model, we have additional 11 zero-values.
Tr <- matrix(0,100,251)
S[,12] <- S_1
Tr[,12] <- T_1
w <- w_1
component <- c(T_1,S_1)
for (i in 13:251) {
# update particles
Tr[,i] <- Tr[,i-1] + rnorm(100)
for (j in 1:11) S[,i] <- S[,i]-S[,i-j]
S[,i] <- S[,i] + rnorm(100)
# update weights
w <- w * dnorm(rep(data[i-11],100)-Tr[,i]-S[,i])
w <- w / sum(w)
# evaluate state value
t <- sum(w * Tr[,i])
s <- sum(w * S[,i])
# add to our component path
component <- rbind(component, c(t,s))
}
?ts
trend <- ts(component[,1],frequency = 12, start = c(2001,1),end = c(2020,12))
season <- ts(component[,2],frequency = 12, start = c(2001,1),end = c(2020,12))
plot(trend)
plot(season)
plot(data,type="l",ylab="", ylim=c(-50,2000))
lines(data-season, ylab="",ylim=c(-50,2000),col="red")
library(forecast)
set.seed(1)
model <- Arima(ts(rnorm(24000),freq=12), order=c(0,1,1), seasonal=c(0,1,1),fixed=c(theta=0.5, Theta=0.5))
data <- simulate(model,nsim=240)
plot(data)
m_x11 <- seas(data, x11 = "", regression.aictest =  NULL)
library(forecast)
library(seasonal)
set.seed(1)
model <- Arima(ts(rnorm(24000),freq=12), order=c(0,1,1), seasonal=c(0,1,1),fixed=c(theta=0.5, Theta=0.5))
data <- simulate(model,nsim=240)
plot(data)
m_x11 <- seas(data, x11 = "", regression.aictest =  NULL)
plot(m_x11)
m_seats <- seas(data, regression.aictest = NULL)
plot(m_seats)
summary(m_seats)
summary(m_x11)
plot(data,col="green",ylim=c(-10,2000),ylab="")
par(new=T)
plot(final(m_x11),col="red",ylim=c(-10,2000),ylab="")
par(new=T)
plot(final(m_seats),col="blue",ylim=c(-10,2000),ylab="")
legend("topleft",c("Data","X11","SEATS"),col=c("green","red","blue"),lty=c(1,1,1))
library(forecast)
library(seasonal)
set.seed(1)
model <- Arima(ts(rnorm(24000),freq=12), order=c(0,1,1), seasonal=c(0,1,1),fixed=c(theta=0.5, Theta=0.5))
data <- simulate(model,nsim=240)
plot(data)
m_x11 <- seas(data, x11 = "", regression.aictest =  NULL)
plot(m_x11)
m_seats <- seas(data, regression.aictest = NULL)
plot(m_seats)
summary(m_seats)
summary(m_x11)
plot(data,col="green",ylim=c(-10,2000),ylab="")
par(new=T)
plot(final(m_x11),col="red",ylim=c(-10,2000),ylab="")
par(new=T)
plot(final(m_seats),col="blue",ylim=c(-10,2000),ylab="")
legend("topleft",c("Data","X11","SEATS"),col=c("green","red","blue"),lty=c(1,1,1))
% Messing things up after here.
library(forecast)
library(seasonal)
set.seed(1)
model <- Arima(ts(rnorm(24000),freq=12), order=c(0,1,1), seasonal=c(0,1,1),fixed=c(theta=0.5, Theta=0.5))
data <- simulate(model,nsim=240)
plot(data)
m_x11 <- seas(data, x11 = "", regression.aictest =  NULL)
plot(m_x11)
m_seats <- seas(data, regression.aictest = NULL)
plot(m_seats)
summary(m_seats)
summary(m_x11)
plot(data,col="green",ylim=c(-10,2000),ylab="")
par(new=T)
plot(final(m_x11),col="red",ylim=c(-10,2000),ylab="")
par(new=T)
plot(final(m_seats),col="blue",ylim=c(-10,2000),ylab="")
legend("topleft",c("Data","X11","SEATS"),col=c("green","red","blue"),lty=c(1,1,1))
# Messing things up after here.
plot(data-final(m_seats))
tinytex:::is_tinytex()
