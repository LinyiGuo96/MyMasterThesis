else data <- data + runif(1, min=0, max=10^6)
return(data)
}
simlist1 <- function(n,length) {
Datalist <- list()
for (i in 1:n)  Datalist[[i]] <- simulation1(length)
return(Datalist)
}
library(seasonal)
library(KFAS)
ssm <- SSModel(sim ~ SSMtrend(1, Q=list(NA)) + SSMseasonal(12, sea.type = 'dummy', Q=NA), H=NA)
fit <- fitSSM(ssm, inits = c(1,1,1))
kfs <- KFS(fit$model)
model <- SSModel(matrix(NA, 180, 1) ~ SSMtrend(1, Q=list(1)) + SSMseasonal(12, sea.type = "dummy", Q=1), H=1)
sim <- simulateSSM(model, "obs")
sim <- ts(sim[,,1], start = c(2000,01), frequency = 12)
ssm <- SSModel(sim ~ SSMtrend(1, Q=list(NA)) + SSMseasonal(12, sea.type = 'dummy', Q=NA), H=NA)
fit <- fitSSM(ssm, inits = c(1,1,1))
kfs <- KFS(fit$model)
ssm2 <- SSModel(sim ~ SSMtrend(1, Q=list(1)) + SSMseasonal(12, sea.type = "dummy", Q=1), H=1)
kfs2 <- KFS(ssm2)
par(mfrow=c(2,3))
plot(series(model_x11, "d10"))
plot(signal(kfs, state="seasonal")$signal, main= "mle")
plot(signal(kfs2, state="seasonal")$signal, main="try")
plot(series(model_x11, "d12"))
plot(signal(kfs, state="trend")$signal, main="mle")
plot(signal(kfs2, state="trend")$signal, main="try")
par(mfrow=c(1,1))
model_x11 <- seas(sim, x11='')
par(mfrow=c(2,3))
plot(series(model_x11, "d10"))
plot(signal(kfs, state="seasonal")$signal, main= "mle")
plot(signal(kfs2, state="seasonal")$signal, main="try")
plot(series(model_x11, "d12"))
plot(signal(kfs, state="trend")$signal, main="mle")
plot(signal(kfs2, state="trend")$signal, main="try")
par(mfrow=c(1,1))
par(mfrow=c(3,3))
plot(series(model_x11, "d10"))
plot(signal(kfs, state="seasonal")$signal, main= "mle")
plot(signal(kfs2, state="seasonal")$signal, main="try")
plot(series(model_x11, "d12"))
plot(signal(kfs, state="trend")$signal, main="mle")
plot(signal(kfs2, state="trend")$signal, main="try")
plot(series(model_x11, "d13"))
plot(residuals(kfs,"recursive"), main="mle")
plot(residuals(kfs2, "recursive"), main="try")
par(mfrow=c(1,1))
model <- SSModel(matrix(NA, 180, 1) ~ SSMtrend(1, Q=list(1)) + SSMseasonal(12, sea.type = "dummy", Q=1), H=1)
sim <- simulateSSM(model, "obs")
sim <- ts(sim[,,1], start = c(2000,01), frequency = 12)
ssm <- SSModel(sim ~ SSMtrend(1, Q=list(NA)) + SSMseasonal(12, sea.type = 'dummy', Q=NA), H=NA)
fit <- fitSSM(ssm, inits = c(1,1,1))
kfs <- KFS(fit$model)
fit$model["Q"]
fit$model["H"]
model_x11 <- seas(sim, x11='')
summary(model_x11)
ssm2 <- SSModel(sim ~ SSMtrend(1, Q=list(1)) + SSMseasonal(12, sea.type = "dummy", Q=1), H=1)
kfs2 <- KFS(ssm2)
par(mfrow=c(3,3))
plot(series(model_x11, "d10"))
plot(signal(kfs, state="seasonal")$signal, main= "mle")
plot(signal(kfs2, state="seasonal")$signal, main="try")
plot(series(model_x11, "d12"))
plot(signal(kfs, state="trend")$signal, main="mle")
plot(signal(kfs2, state="trend")$signal, main="try")
plot(series(model_x11, "d13"))
plot(residuals(kfs,"recursive"), main="mle")
plot(residuals(kfs2, "recursive"), main="try")
par(mfrow=c(1,1))
model <- SSModel(matrix(NA, 180, 1) ~ SSMtrend(1, Q=list(5)) + SSMseasonal(12, sea.type = "dummy", Q=1), H=10)
sim <- simulateSSM(model, "obs")
sim <- ts(sim[,,1], start = c(2000,01), frequency = 12)
ssm <- SSModel(sim ~ SSMtrend(1, Q=list(NA)) + SSMseasonal(12, sea.type = 'dummy', Q=NA), H=NA)
fit <- fitSSM(ssm, inits = c(1,1,1))
kfs <- KFS(fit$model)
fit$model["Q"]
fit$model["H"]
model_x11 <- seas(sim, x11='')
summary(model_x11)
ssm2 <- SSModel(sim ~ SSMtrend(1, Q=list(5)) + SSMseasonal(12, sea.type = "dummy", Q=1), H=10)
kfs2 <- KFS(ssm2)
par(mfrow=c(3,3))
plot(series(model_x11, "d10"))
plot(signal(kfs, state="seasonal")$signal, main= "mle")
plot(signal(kfs2, state="seasonal")$signal, main="try")
plot(series(model_x11, "d12"))
plot(signal(kfs, state="trend")$signal, main="mle")
plot(signal(kfs2, state="trend")$signal, main="try")
plot(series(model_x11, "d13"))
plot(residuals(kfs,"recursive"), main="mle")
plot(residuals(kfs2, "recursive"), main="try")
par(mfrow=c(1,1))
plor(rnorm(10000, 0,1))
plot(rnorm(10000, 0,1))
plot(rnorm(10000, 0,2))
plot(rnorm(10000, 0,10))
plot(rnorm(1000, 0,10))
getwd()
setwd("C:/Users/GuoLY/desktop/markdown/2020winter/masterthesis")
setwd("C:/Users/GuoLY/desktop/markdown/2020 Winter/masterthesis")
rm(list=ls())
library(seasonal)
library(KFAS)
ssm <- SSModel(matrix(NA,180,1) ~ SSMtrend(1, Q=list(5)) + SSMseasonal(12, sea.type = "dummy", Q=1), H=10)
sim <- simulateSSM(ssm, nsim = 1000)
sim <- simulateSSM(ssm, "obs", nsim = 1000)
simlist <- lapply(1:1000, function(x) sim[,,x])
ssm <- SSModel(simlist[[1]] ~ SSMtrend(1, Q=list(NA)) +SSMseasonal(12, sea.type = "dummy", Q=NA), H=NA)
fit <- fitSSM(ssm, inits = c(1,1,1))
kfs <- KFS(fit$model)
fit$optim.out
fit$optim.out$par
fit$model["Q"]
fit$model["H"]
fit$model["H"][1,1]
class(fit$model["H"])
ssm <- SSModel(sim ~ SSMtrend(1, Q=list(NA)) +SSMseasonal(12, sea.type = "dummy", Q=NA), H=NA)
fit <- fitSSM(ssm, inits = c(1,1,1))
ssm <- SSModel(sim[1] ~ SSMtrend(1, Q=list(NA)) +SSMseasonal(12, sea.type = "dummy", Q=NA), H=NA)
fit <- fitSSM(ssm, inits = c(1,1,1))
kfs <- KFS(fit$model)
ssm <- SSModel(simlist[1] ~ SSMtrend(1, Q=list(NA)) +SSMseasonal(12, sea.type = "dummy", Q=NA), H=NA)
fit <- fitSSM(ssm, inits = c(1,1,1))
ssm <- SSModel(simlist[1] ~ SSMtrend(1, Q=list(NA)) +SSMseasonal(12, sea.type = "dummy", Q=NA), H=NA)
ssm <- SSModel(simlist[[1]] ~ SSMtrend(1, Q=list(NA)) +SSMseasonal(12, sea.type = "dummy", Q=NA), H=NA)
fit <- fitSSM(ssm, inits = c(1,1,1))
kfs <- KFS(fit$model)
fit$optim.out$par
fit$model["Q"]
fit$model["Q"][,,1]
fit$model["Q"][1,,1]
fit$model["Q"][1,1,1]
fit$model["H"][1,1,1]
?SSModel
mle_extract <- function(data) {
ssm <- SSModel(data ~ SSMtrend(1, Q=list(NA)) +SSMseasonal(12, sea.type = "dummy", Q=NA), H=NA)
fit <- fitSSM(ssm, inits = c(1,1,1))
kfs <- KFS(fit$model)
var_I <- fit$model["H"][1,1,1]
var_T <- fit$model["Q"][1,1,1]
var_S <- fit$model["Q"][2,2,1]
return(c(var_I, var_T, var_S))
}
mlematrix <- sapply(simlist, mle_extract)
system.time({
mlematrix <- sapply(simlist, mle_extract)
})
library(doParallel)
library(doParallel)
cl <- detectCores()
cl <- makeCluster(cl)
registerDoParallel(cl)
clusterEvalQ(cl, {
library(KFAS)
})
system.time({
mlematrix2 <- parSapply(cl, simlist, mle_extract)
})
stopCluster(cl)
mlematrix-mlematrix2
sum(mlematrix-mlematrix2)
rm(mlematrix2)
hist(mlematrix[,1])
str(mlematrix)
summary(mlematrix)
dim(mlematrix)
mlematrix <- t(mlematrix)
dim(mlematrix)
hist(mlematrix[,1])
hist(mlematrix)
head(mlematrix)
hist(mlematrix[,1])
hist(mlematrix[,2])
hist(mlematrix[,3])
?hist
hist(mlematrix[,3], breaks = 100)
hist(mlematrix[,1], breaks = 100)
hist(mlematrix[,2], breaks = 100)
hist(mlematrix[,3], breaks = 100)
simlist <- lapply(1:1000, function(x) ts(simlist[[x]], start = c(2000,01), frequency = 12))
x11eg <- seas(simlist[[1]], x11="")
length(series(x11, "d12"))
length(series(x11eg, "d12"))
ssmeg <- SSModel(simlist[[1]] ~ SSMtrend(1, Q=list(1)) +SSMseasonal(12, sea.type = "dummy", Q=1), H=2)
kfseg <- KFS(ssmeg)
length(signal(kfs, "trend")$signal)
length(residuals(kfs, "recursive"))
rm(c(ssmeg, x11eg))
rm(list=c(ssmeg, x11eg))
?rm
rm(list=c('ssmeg', 'x11eg'))
rm(kfseg)
loss <- function(x11, kfs) {
x11_T <- series(x11, "d12")
x11_S <- series(x11, "d10")
x11_I <- series(x11, "d13")
ssm_T <- signal(kfs, "trend")$signal
ssm_S <- signal(kfs, "seasonal")$signal
ssm_I <- residuals(kfs, "recursive")
loss <- sum((x11_T-ssm_T)^2) + sum((x11_S-ssm_S)^2) + sum((x11_I-ssm_I)^2)
return(loss)
}
data1_x11 <- seas(simlist[[1]],x11='')
for(i in -50:50){
for (j in -50:50) {
ssm <- SSModel(simlist[[1]] ~ SSMtrend(1, Q=list(5+j*0.1)) + SSMseasonal(12, sea.type = 'dummy', Q=1), H=10+i*.1)
kfs <- KFS(kfs)
loss <- loss(data1_x11, kfs)
lossmat <- rbind(lossmat, c(10+i*.1, 5+j*.1, loss))
}
}
for(i in -50:50){
for (j in -50:50) {
ssm <- SSModel(simlist[[1]] ~ SSMtrend(1, Q=list(5+j*0.1)) + SSMseasonal(12, sea.type = 'dummy', Q=1), H=10+i*.1)
kfs <- KFS(ssm)
loss <- loss(data1_x11, kfs)
lossmat <- rbind(lossmat, c(10+i*.1, 5+j*.1, loss))
}
}
lossmat <- c()
for(i in -50:50){
for (j in -50:50) {
ssm <- SSModel(simlist[[1]] ~ SSMtrend(1, Q=list(5+j*0.1)) + SSMseasonal(12, sea.type = 'dummy', Q=1), H=10+i*.1)
kfs <- KFS(ssm)
loss <- loss(data1_x11, kfs)
lossmat <- rbind(lossmat, c(10+i*.1, 5+j*.1, loss))
}
}
loss <- function(x11, kfs) {
x11_T <- series(x11, "d12")
x11_S <- series(x11, "d10")
x11_I <- series(x11, "d13")
ssm_T <- signal(kfs, "trend")$signal
ssm_S <- signal(kfs, "seasonal")$signal
ssm_I <- residuals(kfs, "recursive")
loss <- sum((x11_T-ssm_T)^2) + sum((x11_S-ssm_S)^2) + sum((x11_I-ssm_I)^2)
return(loss)
}
data1_x11 <- seas(simlist[[1]],x11='')
lossmat <- c()
for(i in -50:50){
for (j in -50:50) {
ssm <- SSModel(simlist[[1]] ~ SSMtrend(1, Q=list(5+j*0.1)) + SSMseasonal(12, sea.type = 'dummy', Q=1), H=10+i*.1)
kfs <- KFS(ssm)
loss <- loss(data1_x11, kfs)
lossmat <- rbind(lossmat, c(10+i*.1, 5+j*.1, loss))
}
}
loss <- function(x11, kfs) {
x11_T <- series(x11, "d12")
x11_S <- series(x11, "d10")
x11_I <- series(x11, "d13")
ssm_T <- signal(kfs, "trend")$signal
ssm_S <- signal(kfs, "seasonal")$signal
ssm_I <- residuals(kfs, "recursive")
loss <- sum((x11_T-ssm_T)^2) + sum((x11_S-ssm_S)^2) + sum((x11_I-ssm_I)^2)
return(loss)
}
data1_x11 <- seas(simlist[[1]],x11='')
lossmat <- c()
for(i in -50:50){
for (j in -50:50) {
ssm <- SSModel(simlist[[1]] ~ SSMtrend(1, Q=list(5+j*0.1)) + SSMseasonal(12, sea.type = 'dummy', Q=1), H=10+i*.1)
kfs <- KFS(ssm)
L <- loss(data1_x11, kfs)
lossmat <- rbind(lossmat, c(10+i*.1, 5+j*.1, L))
}
}
mlematrix[1,]
lossmat[which.min(lossmat[,3]),]
8.772556/1.19
6.2054/1.192
ssm <- SSModel(simlist[[1]] ~ SSMtrend(1, Q=list(6.205378)) + SSMseasonal(12, sea.type = 'dummy', Q=1.192358), H=8.772556)
kfs <- KFS(ssm)
ssm2 <- SSModel(simlist[[1]] ~ SSMtrend(1, Q=list(5.6)) + SSMseasonal(12, sea.type = 'dummy', Q=1), H=7.9)
kfs2 <- KFS(ssm2)
par(mfrow=c(3,3))
plot(series(data1_x11, "d10"))
plot(signal(kfs, state="seasonal")$signal, main= "mle")
plot(signal(kfs2, state="seasonal")$signal, main="ideal")
plot(series(model_x11, "d12"))
plot(signal(kfs, state="trend")$signal, main="mle")
plot(signal(kfs2, state="trend")$signal, main="ideal")
plot(series(model_x11, "d13"))
par(mfrow=c(3,3))
plot(series(data1_x11, "d10"))
plot(signal(kfs, state="seasonal")$signal, main= "mle")
plot(signal(kfs2, state="seasonal")$signal, main="ideal")
plot(series(data1_x11, "d12"))
plot(signal(kfs, state="trend")$signal, main="mle")
plot(signal(kfs2, state="trend")$signal, main="ideal")
plot(series(data1_x11, "d13"))
plot(residuals(kfs,"recursive"), main="mle")
plot(residuals(kfs2, "recursive"), main="try")
par(mfrow=c(1,1))
par(mfrow=c(3,3))
plot(series(data1_x11, "d10"))
plot(signal(kfs, state="seasonal")$signal, main= "mle")
plot(signal(kfs2, state="seasonal")$signal, main="ideal")
plot(series(data1_x11, "d12"))
plot(signal(kfs, state="trend")$signal, main="mle")
plot(signal(kfs2, state="trend")$signal, main="ideal")
plot(series(data1_x11, "d13"))
plot(residuals(kfs,"recursive"), main="mle")
plot(residuals(kfs2, "recursive"), main="ideal")
par(mfrow=c(1,1))
par(mfrow=c(2,2))
plot(signal(kfs, state="trend")$signal, main="mle")
plot(signal(kfs2, state="trend")$signal, main="ideal")
plot(signal(kfs, state="trend", filtered = TRUE)$signal, main="filtered mle")
plot(signal(kfs2, state="trend", filtered = TRUE)$signal, main="filtered ideal")
par(mfrow=c(1,1))
par(mfrow=c(2,2))
plot(signal(kfs, state="seasonal")$signal, main="mle")
plot(signal(kfs2, state="seasonal")$signal, main="ideal")
plot(signal(kfs, state="seasonal", filtered = TRUE)$signal, main="filtered mle")
plot(signal(kfs2, state="seasonal", filtered = TRUE)$signal, main="filtered ideal")
par(mfrow=c(1,1))
par(mfrow=c(2,3))
plot(series(data1_x11, "d12"))
plot(signal(kfs, state="trend")$signal, main="mle")
plot(signal(kfs2, state="trend")$signal, main="ideal")
plot(series(data1_x11, "d12"))
plot(signal(kfs, state="trend", filtered = TRUE)$signal, main="filtered mle")
plot(signal(kfs2, state="trend", filtered = TRUE)$signal, main="filtered ideal")
par(mfrow=c(1,1))
par(mfrow=c(2,3))
plot(series(data1_x11, "d10"))
plot(signal(kfs, state="seasonal")$signal, main="mle")
plot(signal(kfs2, state="seasonal")$signal, main="ideal")
plot(series(data1_x11, "d10"))
plot(signal(kfs, state="seasonal", filtered = TRUE)$signal, main="filtered mle")
plot(signal(kfs2, state="seasonal", filtered = TRUE)$signal, main="filtered ideal")
par(mfrow=c(1,1))
par(mfrow=c(4,3))
plot(series(data1_x11, "d10"))
plot(signal(kfs, state="seasonal")$signal, main= "mle")
plot(signal(kfs2, state="seasonal")$signal, main="ideal")
plot(series(data1_x11, "d12"))
plot(signal(kfs, state="trend")$signal, main="mle")
plot(signal(kfs2, state="trend")$signal, main="ideal")
plot(series(data1_x11, "d13"))
plot(residuals(kfs,"recursive"), main="mle")
plot(residuals(kfs2, "recursive"), main="ideal")
plot(series(data1_x11, "d11"))
par(mfrow=c(1,1))
par(mfrow=c(3,3))
plot(series(data1_x11, "d10"))
plot(signal(kfs, state="seasonal")$signal, main= "mle")
plot(signal(kfs2, state="seasonal")$signal, main="ideal")
plot(series(data1_x11, "d12"))
plot(signal(kfs, state="trend")$signal, main="mle")
plot(signal(kfs2, state="trend")$signal, main="ideal")
plot(series(data1_x11, "d13"))
plot(residuals(kfs,"recursive"), main="mle")
plot(residuals(kfs2, "recursive"), main="ideal")
par(mfrow=c(1,1))
# dichotomy replace exhaustion
?repeat
d
# set var_S = 1
mle_extract <- function(data) {
ssm <- SSModel(data ~ SSMtrend(1, Q=list(NA)) +SSMseasonal(12, sea.type = "dummy", Q=1), H=NA)
fit <- fitSSM(ssm, inits = c(1,1))
kfs <- KFS(fit$model)
var_I <- fit$model["H"][1,1,1]
var_T <- fit$model["Q"][1,1,1]
return(c(var_I, var_T, 1))
}
#system.time({
#  mlematrix <- sapply(simlist, mle_extract)
#})
library(doParallel)
cl <- detectCores()
cl <- makeCluster(cl)
registerDoParallel(cl)
clusterEvalQ(cl, {
library(KFAS)
})
system.time({
mlematrix_new <- t(parSapply(cl, simlist, mle_extract))
})
stopCluster(cl)
hist(mlematrix_new[,1], breaks = 100)
hist(mlematrix_new[,2], breaks = 100)
hist(mlematrix_new[,1], breaks = 100)
hist(mlematrix_new[,2], breaks = 100)
hist(mlematrix_new[,1], breaks = 100)
hist(mlematrix_new[,2], breaks = 100)
hist(mlematrix_new[,1], breaks = 100, density = TRUE)
?density
hist(mlematrix_new[,1], breaks = 100)
hist(mlematrix_new[,1], breaks = 100) + line(density(mlematrix_new[,1]))
plot(density(mlematrix_new[,1]))
plot(density(mlematrix_new[,2]))
plot(density(mlematrix_new[,1]))
plot(density(mlematrix_new[,2]))
plot(density(mlematrix_new[,1]))
plot(density(mlematrix[,2]))
plot(density(mlematrix[,3]))
loss2 <- function(x11, kfs, var) {
x11_T <- series(x11, "d12")
x11_S <- series(x11, "d10")
x11_I <- series(x11, "d13")
ssm_T <- signal(kfs, "trend")$signal
ssm_S <- signal(kfs, "seasonal")$signal
ssm_I <- residuals(kfs, "recursive")
loss <- sum((x11_T-ssm_T)^2)/var[2] + sum((x11_S-ssm_S)^2)/var[3] + sum((x11_I-ssm_I)^2)/var[1]
return(loss)
}
data1_x11 <- seas(simlist[[1]],x11='')
lossmat2 <- c()
for(i in -50:50){
for (j in -50:50) {
ssm <- SSModel(simlist[[1]] ~ SSMtrend(1, Q=list(5+j*0.1)) + SSMseasonal(12, sea.type = 'dummy', Q=1), H=10+i*.1)
kfs <- KFS(ssm)
var <- c(10+i*.1,5+j*0.1,1)
L <- loss2(data1_x11, kfs, var)
lossmat2 <- rbind(lossmat2, c(10+i*.1, 5+j*.1, L))
}
}
lossmat2[which.min(lossmat2[,3]), ]
par(mfrow=c(3,3))
plot(series(data1_x11, "d10"))
plot(signal(kfs, state="seasonal")$signal, main= "mle")
plot(signal(kfs2, state="seasonal")$signal, main="ideal")
plot(series(data1_x11, "d12"))
plot(signal(kfs, state="trend")$signal, main="mle")
plot(signal(kfs2, state="trend")$signal, main="ideal")
plot(series(data1_x11, "d13"))
plot(residuals(kfs,"recursive"), main="mle")
plot(residuals(kfs2, "recursive"), main="ideal")
par(mfrow=c(1,1))
mlematrix[1,]
ssm3 <- SSModel(simlist[[1]] ~ SSMtrend(1, Q=list(9.6)) + SSMseasonal(12, sea.type = 'dummy', Q=1), H=15)
kfs3 <- KFS(ssm3)
par(mfrow=c(3,3))
plot(series(data1_x11, "d10"))
plot(signal(kfs, state="seasonal")$signal, main= "mle")
plot(signal(kfs3, state="seasonal")$signal, main="ideal")
plot(series(data1_x11, "d12"))
plot(signal(kfs, state="trend")$signal, main="mle")
plot(signal(kfs3, state="trend")$signal, main="ideal")
plot(series(data1_x11, "d13"))
plot(residuals(kfs,"recursive"), main="mle")
plot(residuals(kfs3, "recursive"), main="ideal")
par(mfrow=c(1,1))
par(mfrow=c(2,3))
plot(series(data1_x11, "d12"))
plot(signal(kfs, state="trend")$signal, main="mle")
plot(signal(kfs3, state="trend")$signal, main="ideal")
plot(series(data1_x11, "d12"))
plot(signal(kfs, state="trend", filtered = TRUE)$signal, main="filtered mle")
plot(signal(kfs3, state="trend", filtered = TRUE)$signal, main="filtered ideal")
par(mfrow=c(1,1))
par(mfrow=c(2,3))
plot(series(data1_x11, "d10"))
plot(signal(kfs, state="seasonal")$signal, main="mle")
plot(signal(kfs3, state="seasonal")$signal, main="ideal")
plot(series(data1_x11, "d10"))
plot(signal(kfs, state="seasonal", filtered = TRUE)$signal, main="filtered mle")
plot(signal(kfs3, state="seasonal", filtered = TRUE)$signal, main="filtered ideal")
par(mfrow=c(1,1))
ssm2 <- SSModel(simlist[[1]] ~ SSMtrend(1, Q=list(5.6)) + SSMseasonal(12, sea.type = 'dummy', Q=1), H=7.9)
kfs2 <- KFS(ssm2)
par(mfrow=c(3,4))
plot(series(data1_x11, "d10"))
plot(signal(kfs, state="seasonal")$signal, main= "mle")
plot(signal(kfs2, state="seasonal")$signal, main="loss1")
plot(signal(kfs3, state="seasonal")$signal, main="loss2")
plot(series(data1_x11, "d12"))
plot(signal(kfs, state="trend")$signal, main="mle")
plot(signal(kfs2, state="trend")$signal, main="loss1")
plot(signal(kfs3, state="trend")$signal, main="loss2")
plot(series(data1_x11, "d13"))
plot(residuals(kfs,"recursive"), main="mle")
plot(residuals(kfs2, "recursive"), main="loss1")
plot(residuals(kfs3, "recursive"), main="loss2")
par(mfrow=c(1,1))
par(mfrow=c(2,4))
plot(series(data1_x11, "d12"))
plot(signal(kfs, state="trend")$signal, main="mle")
plot(signal(kfs2, state="seasonal")$signal, main="loss1")
plot(signal(kfs3, state="seasonal")$signal, main="loss2")
plot(series(data1_x11, "d12"))
plot(signal(kfs, state="trend", filtered = TRUE)$signal, main="filtered mle")
plot(signal(kfs2, state="seasonal", filtered = TRUE)$signal, main="filtered loss1")
plot(signal(kfs3, state="seasonal", filtered = TRUE)$signal, main="filtered loss2")
par(mfrow=c(1,1))
par(mfrow=c(2,4))
plot(series(data1_x11, "d12"))
plot(signal(kfs, state="trend")$signal, main="mle")
plot(signal(kfs2, state="trend")$signal, main="loss1")
plot(signal(kfs3, state="trend")$signal, main="loss2")
plot(series(data1_x11, "d12"))
plot(signal(kfs, state="trend", filtered = TRUE)$signal, main="filtered mle")
plot(signal(kfs2, state="trend", filtered = TRUE)$signal, main="filtered loss1")
plot(signal(kfs3, state="trend", filtered = TRUE)$signal, main="filtered loss2")
par(mfrow=c(1,1))
par(mfrow=c(2,4))
plot(series(data1_x11, "d10"))
plot(signal(kfs, state="seasonal")$signal, main="mle")
plot(signal(kfs2, state="seasonal")$signal, main="loss1")
plot(signal(kfs3, state="seasonal")$signal, main="loss2")
plot(series(data1_x11, "d10"))
plot(signal(kfs, state="seasonal", filtered = TRUE)$signal, main="filtered mle")
plot(signal(kfs2, state="seasonal", filtered = TRUE)$signal, main="filtered loss1")
plot(signal(kfs3, state="seasonal", filtered = TRUE)$signal, main="filtered loss2")
par(mfrow=c(1,1))
